"""
Project Euler Problem 2
=======================

Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms will be:

                  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

Find the sum of all the even-valued terms in the sequence which do not
exceed four million.
"""
def generate_fibonacci(limit):
    """
    Takes `limit` and returns a list of numbers in the Fibonacci sequence up
    to that limit.
    """
    a = 1
    b = 2
    terms = []

    while a < limit:
        terms.append(a)

        b = a + b
        a = b - a

    return terms

def sum_even_numbers(numbers):
    """
    Takes a list of numbers and returns a sum of all even numbers in that list.
    """
    even_numbers = []

    for number in numbers:
        if number % 2 == 0:
            even_numbers.append(number)

    return sum(even_numbers)

def test_sum_even_numbers():
    assert sum_even_numbers([1, 2, 3, 4, 5]) == 6

def test_generate_fibonacci():
	assert generate_fibonacci(10) == [1, 2, 3, 5, 8]

print(sum_even_numbers(generate_fibonacci(4000000)))